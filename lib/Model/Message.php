<?php
/**
 * Message
 *
 * PHP version 5
 *
 * @category Class
 * @package  Chabok\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Chabok Push
 *
 * Integrate your app with Chabok messaging & push api seamlessly
 *
 * OpenAPI spec version: 1.21.4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Chabok\Client\Model;

use \ArrayAccess;

/**
 * Message Class Doc Comment
 *
 * @category    Class
 * @package     Chabok\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Message implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'message';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'created_at' => 'double',
        'content' => 'string',
        'content_type' => 'string',
        'data' => 'object',
        'delivered' => '\Chabok\Client\Model\XAny[]',
        'seen' => '\Chabok\Client\Model\XAny[]',
        'dismiss' => '\Chabok\Client\Model\XAny[]',
        'stateful' => 'bool',
        'live' => 'bool',
        'in_app' => 'bool',
        'publish_id' => 'string',
        'c_id' => 'string',
        'track_id' => 'string',
        'cip' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'created_at' => 'double',
        'content' => null,
        'content_type' => null,
        'data' => null,
        'delivered' => null,
        'seen' => null,
        'dismiss' => null,
        'stateful' => null,
        'live' => null,
        'in_app' => null,
        'publish_id' => null,
        'c_id' => null,
        'track_id' => null,
        'cip' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'created_at' => 'createdAt',
        'content' => 'content',
        'content_type' => 'contentType',
        'data' => 'data',
        'delivered' => 'delivered',
        'seen' => 'seen',
        'dismiss' => 'dismiss',
        'stateful' => 'stateful',
        'live' => 'live',
        'in_app' => 'inApp',
        'publish_id' => 'publishId',
        'c_id' => 'cId',
        'track_id' => 'trackId',
        'cip' => 'cip'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'created_at' => 'setCreatedAt',
        'content' => 'setContent',
        'content_type' => 'setContentType',
        'data' => 'setData',
        'delivered' => 'setDelivered',
        'seen' => 'setSeen',
        'dismiss' => 'setDismiss',
        'stateful' => 'setStateful',
        'live' => 'setLive',
        'in_app' => 'setInApp',
        'publish_id' => 'setPublishId',
        'c_id' => 'setCId',
        'track_id' => 'setTrackId',
        'cip' => 'setCip'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'created_at' => 'getCreatedAt',
        'content' => 'getContent',
        'content_type' => 'getContentType',
        'data' => 'getData',
        'delivered' => 'getDelivered',
        'seen' => 'getSeen',
        'dismiss' => 'getDismiss',
        'stateful' => 'getStateful',
        'live' => 'getLive',
        'in_app' => 'getInApp',
        'publish_id' => 'getPublishId',
        'c_id' => 'getCId',
        'track_id' => 'getTrackId',
        'cip' => 'getCip'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['content'] = isset($data['content']) ? $data['content'] : null;
        $this->container['content_type'] = isset($data['content_type']) ? $data['content_type'] : null;
        $this->container['data'] = isset($data['data']) ? $data['data'] : null;
        $this->container['delivered'] = isset($data['delivered']) ? $data['delivered'] : null;
        $this->container['seen'] = isset($data['seen']) ? $data['seen'] : null;
        $this->container['dismiss'] = isset($data['dismiss']) ? $data['dismiss'] : null;
        $this->container['stateful'] = isset($data['stateful']) ? $data['stateful'] : null;
        $this->container['live'] = isset($data['live']) ? $data['live'] : null;
        $this->container['in_app'] = isset($data['in_app']) ? $data['in_app'] : null;
        $this->container['publish_id'] = isset($data['publish_id']) ? $data['publish_id'] : null;
        $this->container['c_id'] = isset($data['c_id']) ? $data['c_id'] : null;
        $this->container['track_id'] = isset($data['track_id']) ? $data['track_id'] : null;
        $this->container['cip'] = isset($data['cip']) ? $data['cip'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['id'] === null) {
            $invalid_properties[] = "'id' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalid_properties[] = "'created_at' can't be null";
        }
        if ($this->container['content'] === null) {
            $invalid_properties[] = "'content' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['id'] === null) {
            return false;
        }
        if ($this->container['created_at'] === null) {
            return false;
        }
        if ($this->container['content'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created_at
     * @return double
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     * @param double $created_at
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets content
     * @return string
     */
    public function getContent()
    {
        return $this->container['content'];
    }

    /**
     * Sets content
     * @param string $content
     * @return $this
     */
    public function setContent($content)
    {
        $this->container['content'] = $content;

        return $this;
    }

    /**
     * Gets content_type
     * @return string
     */
    public function getContentType()
    {
        return $this->container['content_type'];
    }

    /**
     * Sets content_type
     * @param string $content_type
     * @return $this
     */
    public function setContentType($content_type)
    {
        $this->container['content_type'] = $content_type;

        return $this;
    }

    /**
     * Gets data
     * @return object
     */
    public function getData()
    {
        return $this->container['data'];
    }

    /**
     * Sets data
     * @param object $data
     * @return $this
     */
    public function setData($data)
    {
        $this->container['data'] = $data;

        return $this;
    }

    /**
     * Gets delivered
     * @return \Chabok\Client\Model\XAny[]
     */
    public function getDelivered()
    {
        return $this->container['delivered'];
    }

    /**
     * Sets delivered
     * @param \Chabok\Client\Model\XAny[] $delivered
     * @return $this
     */
    public function setDelivered($delivered)
    {
        $this->container['delivered'] = $delivered;

        return $this;
    }

    /**
     * Gets seen
     * @return \Chabok\Client\Model\XAny[]
     */
    public function getSeen()
    {
        return $this->container['seen'];
    }

    /**
     * Sets seen
     * @param \Chabok\Client\Model\XAny[] $seen
     * @return $this
     */
    public function setSeen($seen)
    {
        $this->container['seen'] = $seen;

        return $this;
    }

    /**
     * Gets dismiss
     * @return \Chabok\Client\Model\XAny[]
     */
    public function getDismiss()
    {
        return $this->container['dismiss'];
    }

    /**
     * Sets dismiss
     * @param \Chabok\Client\Model\XAny[] $dismiss
     * @return $this
     */
    public function setDismiss($dismiss)
    {
        $this->container['dismiss'] = $dismiss;

        return $this;
    }

    /**
     * Gets stateful
     * @return bool
     */
    public function getStateful()
    {
        return $this->container['stateful'];
    }

    /**
     * Sets stateful
     * @param bool $stateful
     * @return $this
     */
    public function setStateful($stateful)
    {
        $this->container['stateful'] = $stateful;

        return $this;
    }

    /**
     * Gets live
     * @return bool
     */
    public function getLive()
    {
        return $this->container['live'];
    }

    /**
     * Sets live
     * @param bool $live
     * @return $this
     */
    public function setLive($live)
    {
        $this->container['live'] = $live;

        return $this;
    }

    /**
     * Gets in_app
     * @return bool
     */
    public function getInApp()
    {
        return $this->container['in_app'];
    }

    /**
     * Sets in_app
     * @param bool $in_app
     * @return $this
     */
    public function setInApp($in_app)
    {
        $this->container['in_app'] = $in_app;

        return $this;
    }

    /**
     * Gets publish_id
     * @return string
     */
    public function getPublishId()
    {
        return $this->container['publish_id'];
    }

    /**
     * Sets publish_id
     * @param string $publish_id
     * @return $this
     */
    public function setPublishId($publish_id)
    {
        $this->container['publish_id'] = $publish_id;

        return $this;
    }

    /**
     * Gets c_id
     * @return string
     */
    public function getCId()
    {
        return $this->container['c_id'];
    }

    /**
     * Sets c_id
     * @param string $c_id
     * @return $this
     */
    public function setCId($c_id)
    {
        $this->container['c_id'] = $c_id;

        return $this;
    }

    /**
     * Gets track_id
     * @return string
     */
    public function getTrackId()
    {
        return $this->container['track_id'];
    }

    /**
     * Sets track_id
     * @param string $track_id
     * @return $this
     */
    public function setTrackId($track_id)
    {
        $this->container['track_id'] = $track_id;

        return $this;
    }

    /**
     * Gets cip
     * @return string
     */
    public function getCip()
    {
        return $this->container['cip'];
    }

    /**
     * Sets cip
     * @param string $cip
     * @return $this
     */
    public function setCip($cip)
    {
        $this->container['cip'] = $cip;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Chabok\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Chabok\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


