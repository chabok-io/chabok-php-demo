<?php
/**
 * InstallationApi
 * PHP version 5
 *
 * @category Class
 * @package  Chabok\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Chabok Push
 *
 * Integrate your app with Chabok messaging & push api seamlessly
 *
 * OpenAPI spec version: 1.21.4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Chabok\Client\Api;

use \Chabok\Client\ApiClient;
use \Chabok\Client\ApiException;
use \Chabok\Client\Configuration;
use \Chabok\Client\ObjectSerializer;

/**
 * InstallationApi Class Doc Comment
 *
 * @category Class
 * @package  Chabok\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InstallationApi
{
    /**
     * API Client
     *
     * @var \Chabok\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Chabok\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Chabok\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Chabok\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Chabok\Client\ApiClient $apiClient set the API client
     *
     * @return InstallationApi
     */
    public function setApiClient(\Chabok\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation installationAddTag
     *
     * Add tag to all devices of a user
     *
     * @param string $user_id  (required)
     * @param string $tag_name  (required)
     * @throws \Chabok\Client\ApiException on non-2xx response
     * @return object
     */
    public function installationAddTag($user_id, $tag_name)
    {
        list($response) = $this->installationAddTagWithHttpInfo($user_id, $tag_name);
        return $response;
    }

    /**
     * Operation installationAddTagWithHttpInfo
     *
     * Add tag to all devices of a user
     *
     * @param string $user_id  (required)
     * @param string $tag_name  (required)
     * @throws \Chabok\Client\ApiException on non-2xx response
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function installationAddTagWithHttpInfo($user_id, $tag_name)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling installationAddTag');
        }
        // verify the required parameter 'tag_name' is set
        if ($tag_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $tag_name when calling installationAddTag');
        }
        // parse inputs
        $resourcePath = "/installations/addTag/{userId}/{tagName}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                "{" . "userId" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($tag_name !== null) {
            $resourcePath = str_replace(
                "{" . "tagName" . "}",
                $this->apiClient->getSerializer()->toPathValue($tag_name),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'object',
                '/installations/addTag/{userId}/{tagName}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation installationFetchById
     *
     * Find device installation data by installationId
     *
     * @param string $installation_id installationId (required)
     * @throws \Chabok\Client\ApiException on non-2xx response
     * @return \Chabok\Client\Model\Installation
     */
    public function installationFetchById($installation_id)
    {
        list($response) = $this->installationFetchByIdWithHttpInfo($installation_id);
        return $response;
    }

    /**
     * Operation installationFetchByIdWithHttpInfo
     *
     * Find device installation data by installationId
     *
     * @param string $installation_id installationId (required)
     * @throws \Chabok\Client\ApiException on non-2xx response
     * @return array of \Chabok\Client\Model\Installation, HTTP status code, HTTP response headers (array of strings)
     */
    public function installationFetchByIdWithHttpInfo($installation_id)
    {
        // verify the required parameter 'installation_id' is set
        if ($installation_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $installation_id when calling installationFetchById');
        }
        // parse inputs
        $resourcePath = "/installations/fetchById/{installationId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($installation_id !== null) {
            $resourcePath = str_replace(
                "{" . "installationId" . "}",
                $this->apiClient->getSerializer()->toPathValue($installation_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Chabok\Client\Model\Installation',
                '/installations/fetchById/{installationId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Chabok\Client\Model\Installation', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Chabok\Client\Model\Installation', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation installationFetchByUserId
     *
     * Find devices of a specific user
     *
     * @param string $user_id The userId (required)
     * @throws \Chabok\Client\ApiException on non-2xx response
     * @return \Chabok\Client\Model\Installation[]
     */
    public function installationFetchByUserId($user_id)
    {
        list($response) = $this->installationFetchByUserIdWithHttpInfo($user_id);
        return $response;
    }

    /**
     * Operation installationFetchByUserIdWithHttpInfo
     *
     * Find devices of a specific user
     *
     * @param string $user_id The userId (required)
     * @throws \Chabok\Client\ApiException on non-2xx response
     * @return array of \Chabok\Client\Model\Installation[], HTTP status code, HTTP response headers (array of strings)
     */
    public function installationFetchByUserIdWithHttpInfo($user_id)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling installationFetchByUserId');
        }
        // parse inputs
        $resourcePath = "/installations/fetchByUserId/{userId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                "{" . "userId" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Chabok\Client\Model\Installation[]',
                '/installations/fetchByUserId/{userId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Chabok\Client\Model\Installation[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Chabok\Client\Model\Installation[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation installationGroupBySubscription
     *
     * List of unique channel names
     *
     * @throws \Chabok\Client\ApiException on non-2xx response
     * @return object[]
     */
    public function installationGroupBySubscription()
    {
        list($response) = $this->installationGroupBySubscriptionWithHttpInfo();
        return $response;
    }

    /**
     * Operation installationGroupBySubscriptionWithHttpInfo
     *
     * List of unique channel names
     *
     * @throws \Chabok\Client\ApiException on non-2xx response
     * @return array of object[], HTTP status code, HTTP response headers (array of strings)
     */
    public function installationGroupBySubscriptionWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/installations/channels";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'object[]',
                '/installations/channels'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'object[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation installationRemoveTag
     *
     * Remove a tag from devices of a UserId
     *
     * @param string $user_id  (required)
     * @param string $tag_name  (required)
     * @throws \Chabok\Client\ApiException on non-2xx response
     * @return object
     */
    public function installationRemoveTag($user_id, $tag_name)
    {
        list($response) = $this->installationRemoveTagWithHttpInfo($user_id, $tag_name);
        return $response;
    }

    /**
     * Operation installationRemoveTagWithHttpInfo
     *
     * Remove a tag from devices of a UserId
     *
     * @param string $user_id  (required)
     * @param string $tag_name  (required)
     * @throws \Chabok\Client\ApiException on non-2xx response
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function installationRemoveTagWithHttpInfo($user_id, $tag_name)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling installationRemoveTag');
        }
        // verify the required parameter 'tag_name' is set
        if ($tag_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $tag_name when calling installationRemoveTag');
        }
        // parse inputs
        $resourcePath = "/installations/removeTag/{userId}/{tagName}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                "{" . "userId" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($tag_name !== null) {
            $resourcePath = str_replace(
                "{" . "tagName" . "}",
                $this->apiClient->getSerializer()->toPathValue($tag_name),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'object',
                '/installations/removeTag/{userId}/{tagName}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation installationTags
     *
     * List of unique tag names
     *
     * @throws \Chabok\Client\ApiException on non-2xx response
     * @return string[]
     */
    public function installationTags()
    {
        list($response) = $this->installationTagsWithHttpInfo();
        return $response;
    }

    /**
     * Operation installationTagsWithHttpInfo
     *
     * List of unique tag names
     *
     * @throws \Chabok\Client\ApiException on non-2xx response
     * @return array of string[], HTTP status code, HTTP response headers (array of strings)
     */
    public function installationTagsWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/installations/tags";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string[]',
                '/installations/tags'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
