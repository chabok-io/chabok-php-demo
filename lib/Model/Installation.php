<?php
/**
 * Installation
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Chabok Push
 *
 * Integrate your app with Chabok messaging & push api seamlessly
 *
 * OpenAPI spec version: 1.19.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * Installation Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Installation implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'installation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'launch_count' => 'double',
        'launch_time' => '\DateTime',
        'os_version' => 'string',
        'device_model' => 'string',
        'connection' => 'string',
        'ip' => 'string',
        'on_at' => '\DateTime',
        'is_new' => 'bool',
        'notification_settings' => 'object',
        'app_id' => 'string',
        'app_version' => 'string',
        'badge' => 'double',
        'created' => '\DateTime',
        'device_token' => 'string',
        'device_type' => 'string',
        'modified' => '\DateTime',
        'status' => 'string',
        'subscriptions' => 'string[]',
        'time_zone' => 'string',
        'user_id' => 'string',
        'id' => '\Swagger\Client\Model\ObjectID'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'launch_count' => 'double',
        'launch_time' => 'date-time',
        'os_version' => null,
        'device_model' => null,
        'connection' => null,
        'ip' => null,
        'on_at' => 'date-time',
        'is_new' => null,
        'notification_settings' => null,
        'app_id' => null,
        'app_version' => null,
        'badge' => 'double',
        'created' => 'date-time',
        'device_token' => null,
        'device_type' => null,
        'modified' => 'date-time',
        'status' => null,
        'subscriptions' => null,
        'time_zone' => null,
        'user_id' => null,
        'id' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'launch_count' => 'launchCount',
        'launch_time' => 'launchTime',
        'os_version' => 'osVersion',
        'device_model' => 'deviceModel',
        'connection' => 'connection',
        'ip' => 'ip',
        'on_at' => 'onAt',
        'is_new' => 'isNew',
        'notification_settings' => 'notificationSettings',
        'app_id' => 'appId',
        'app_version' => 'appVersion',
        'badge' => 'badge',
        'created' => 'created',
        'device_token' => 'deviceToken',
        'device_type' => 'deviceType',
        'modified' => 'modified',
        'status' => 'status',
        'subscriptions' => 'subscriptions',
        'time_zone' => 'timeZone',
        'user_id' => 'userId',
        'id' => 'id'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'launch_count' => 'setLaunchCount',
        'launch_time' => 'setLaunchTime',
        'os_version' => 'setOsVersion',
        'device_model' => 'setDeviceModel',
        'connection' => 'setConnection',
        'ip' => 'setIp',
        'on_at' => 'setOnAt',
        'is_new' => 'setIsNew',
        'notification_settings' => 'setNotificationSettings',
        'app_id' => 'setAppId',
        'app_version' => 'setAppVersion',
        'badge' => 'setBadge',
        'created' => 'setCreated',
        'device_token' => 'setDeviceToken',
        'device_type' => 'setDeviceType',
        'modified' => 'setModified',
        'status' => 'setStatus',
        'subscriptions' => 'setSubscriptions',
        'time_zone' => 'setTimeZone',
        'user_id' => 'setUserId',
        'id' => 'setId'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'launch_count' => 'getLaunchCount',
        'launch_time' => 'getLaunchTime',
        'os_version' => 'getOsVersion',
        'device_model' => 'getDeviceModel',
        'connection' => 'getConnection',
        'ip' => 'getIp',
        'on_at' => 'getOnAt',
        'is_new' => 'getIsNew',
        'notification_settings' => 'getNotificationSettings',
        'app_id' => 'getAppId',
        'app_version' => 'getAppVersion',
        'badge' => 'getBadge',
        'created' => 'getCreated',
        'device_token' => 'getDeviceToken',
        'device_type' => 'getDeviceType',
        'modified' => 'getModified',
        'status' => 'getStatus',
        'subscriptions' => 'getSubscriptions',
        'time_zone' => 'getTimeZone',
        'user_id' => 'getUserId',
        'id' => 'getId'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['launch_count'] = isset($data['launch_count']) ? $data['launch_count'] : null;
        $this->container['launch_time'] = isset($data['launch_time']) ? $data['launch_time'] : null;
        $this->container['os_version'] = isset($data['os_version']) ? $data['os_version'] : null;
        $this->container['device_model'] = isset($data['device_model']) ? $data['device_model'] : null;
        $this->container['connection'] = isset($data['connection']) ? $data['connection'] : null;
        $this->container['ip'] = isset($data['ip']) ? $data['ip'] : null;
        $this->container['on_at'] = isset($data['on_at']) ? $data['on_at'] : null;
        $this->container['is_new'] = isset($data['is_new']) ? $data['is_new'] : false;
        $this->container['notification_settings'] = isset($data['notification_settings']) ? $data['notification_settings'] : null;
        $this->container['app_id'] = isset($data['app_id']) ? $data['app_id'] : null;
        $this->container['app_version'] = isset($data['app_version']) ? $data['app_version'] : null;
        $this->container['badge'] = isset($data['badge']) ? $data['badge'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['device_token'] = isset($data['device_token']) ? $data['device_token'] : null;
        $this->container['device_type'] = isset($data['device_type']) ? $data['device_type'] : null;
        $this->container['modified'] = isset($data['modified']) ? $data['modified'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['subscriptions'] = isset($data['subscriptions']) ? $data['subscriptions'] : null;
        $this->container['time_zone'] = isset($data['time_zone']) ? $data['time_zone'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['app_id'] === null) {
            $invalid_properties[] = "'app_id' can't be null";
        }
        if ($this->container['device_token'] === null) {
            $invalid_properties[] = "'device_token' can't be null";
        }
        if ($this->container['device_type'] === null) {
            $invalid_properties[] = "'device_type' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['app_id'] === null) {
            return false;
        }
        if ($this->container['device_token'] === null) {
            return false;
        }
        if ($this->container['device_type'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets launch_count
     * @return double
     */
    public function getLaunchCount()
    {
        return $this->container['launch_count'];
    }

    /**
     * Sets launch_count
     * @param double $launch_count
     * @return $this
     */
    public function setLaunchCount($launch_count)
    {
        $this->container['launch_count'] = $launch_count;

        return $this;
    }

    /**
     * Gets launch_time
     * @return \DateTime
     */
    public function getLaunchTime()
    {
        return $this->container['launch_time'];
    }

    /**
     * Sets launch_time
     * @param \DateTime $launch_time
     * @return $this
     */
    public function setLaunchTime($launch_time)
    {
        $this->container['launch_time'] = $launch_time;

        return $this;
    }

    /**
     * Gets os_version
     * @return string
     */
    public function getOsVersion()
    {
        return $this->container['os_version'];
    }

    /**
     * Sets os_version
     * @param string $os_version
     * @return $this
     */
    public function setOsVersion($os_version)
    {
        $this->container['os_version'] = $os_version;

        return $this;
    }

    /**
     * Gets device_model
     * @return string
     */
    public function getDeviceModel()
    {
        return $this->container['device_model'];
    }

    /**
     * Sets device_model
     * @param string $device_model
     * @return $this
     */
    public function setDeviceModel($device_model)
    {
        $this->container['device_model'] = $device_model;

        return $this;
    }

    /**
     * Gets connection
     * @return string
     */
    public function getConnection()
    {
        return $this->container['connection'];
    }

    /**
     * Sets connection
     * @param string $connection
     * @return $this
     */
    public function setConnection($connection)
    {
        $this->container['connection'] = $connection;

        return $this;
    }

    /**
     * Gets ip
     * @return string
     */
    public function getIp()
    {
        return $this->container['ip'];
    }

    /**
     * Sets ip
     * @param string $ip
     * @return $this
     */
    public function setIp($ip)
    {
        $this->container['ip'] = $ip;

        return $this;
    }

    /**
     * Gets on_at
     * @return \DateTime
     */
    public function getOnAt()
    {
        return $this->container['on_at'];
    }

    /**
     * Sets on_at
     * @param \DateTime $on_at
     * @return $this
     */
    public function setOnAt($on_at)
    {
        $this->container['on_at'] = $on_at;

        return $this;
    }

    /**
     * Gets is_new
     * @return bool
     */
    public function getIsNew()
    {
        return $this->container['is_new'];
    }

    /**
     * Sets is_new
     * @param bool $is_new
     * @return $this
     */
    public function setIsNew($is_new)
    {
        $this->container['is_new'] = $is_new;

        return $this;
    }

    /**
     * Gets notification_settings
     * @return object
     */
    public function getNotificationSettings()
    {
        return $this->container['notification_settings'];
    }

    /**
     * Sets notification_settings
     * @param object $notification_settings
     * @return $this
     */
    public function setNotificationSettings($notification_settings)
    {
        $this->container['notification_settings'] = $notification_settings;

        return $this;
    }

    /**
     * Gets app_id
     * @return string
     */
    public function getAppId()
    {
        return $this->container['app_id'];
    }

    /**
     * Sets app_id
     * @param string $app_id
     * @return $this
     */
    public function setAppId($app_id)
    {
        $this->container['app_id'] = $app_id;

        return $this;
    }

    /**
     * Gets app_version
     * @return string
     */
    public function getAppVersion()
    {
        return $this->container['app_version'];
    }

    /**
     * Sets app_version
     * @param string $app_version
     * @return $this
     */
    public function setAppVersion($app_version)
    {
        $this->container['app_version'] = $app_version;

        return $this;
    }

    /**
     * Gets badge
     * @return double
     */
    public function getBadge()
    {
        return $this->container['badge'];
    }

    /**
     * Sets badge
     * @param double $badge
     * @return $this
     */
    public function setBadge($badge)
    {
        $this->container['badge'] = $badge;

        return $this;
    }

    /**
     * Gets created
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     * @param \DateTime $created
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets device_token
     * @return string
     */
    public function getDeviceToken()
    {
        return $this->container['device_token'];
    }

    /**
     * Sets device_token
     * @param string $device_token
     * @return $this
     */
    public function setDeviceToken($device_token)
    {
        $this->container['device_token'] = $device_token;

        return $this;
    }

    /**
     * Gets device_type
     * @return string
     */
    public function getDeviceType()
    {
        return $this->container['device_type'];
    }

    /**
     * Sets device_type
     * @param string $device_type
     * @return $this
     */
    public function setDeviceType($device_type)
    {
        $this->container['device_type'] = $device_type;

        return $this;
    }

    /**
     * Gets modified
     * @return \DateTime
     */
    public function getModified()
    {
        return $this->container['modified'];
    }

    /**
     * Sets modified
     * @param \DateTime $modified
     * @return $this
     */
    public function setModified($modified)
    {
        $this->container['modified'] = $modified;

        return $this;
    }

    /**
     * Gets status
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param string $status
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets subscriptions
     * @return string[]
     */
    public function getSubscriptions()
    {
        return $this->container['subscriptions'];
    }

    /**
     * Sets subscriptions
     * @param string[] $subscriptions
     * @return $this
     */
    public function setSubscriptions($subscriptions)
    {
        $this->container['subscriptions'] = $subscriptions;

        return $this;
    }

    /**
     * Gets time_zone
     * @return string
     */
    public function getTimeZone()
    {
        return $this->container['time_zone'];
    }

    /**
     * Sets time_zone
     * @param string $time_zone
     * @return $this
     */
    public function setTimeZone($time_zone)
    {
        $this->container['time_zone'] = $time_zone;

        return $this;
    }

    /**
     * Gets user_id
     * @return string
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     * @param string $user_id
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets id
     * @return \Swagger\Client\Model\ObjectID
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param \Swagger\Client\Model\ObjectID $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


